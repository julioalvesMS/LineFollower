/* ********************************************** */
/* File name:					main.c            */
/* File description:  Main file of the code.      */
/*                    Contains the initialization */
/*                    sequence and the main loop  */
/* Author name:       julioalvesMS IagoAF         */
/* Creation date:     08mar2018                   */
/* Revision date:     05abr2018                   */
/* ********************************************** */

#include "fsl_device_registers.h"
#include "util.h"
#include "buzzer_hal.h"
#include "mcg_hal.h"
#include "ledswi_hal.h"
#include "display7seg_hal.h"
#include "debugUart.h"
#include "fsl_debug_console.h"


/* ****************************************************** */
/* Method name:         setupPeripherals                  */
/* Method description:  Makes the necessaries setups and  */
/*                      initializatios for a proper       */
/*                      preparation of the peripherals    */
/* Input params:                n/a                       */
/* Output params:               n/a                       */
/* ****************************************************** */
void setupPeripherals()
{
	/* Start clock */
	mcg_clockInit();

	/* Start serial communication */
	debugUart_init();

	/* Start leds */
	ledswi_initLedSwitch(0, 4);

	/* Start display7seg */
	display7seg_initDisplay();
}

/* ****************************************************** */
/* Method name:         main                              */
/* Method description:  System main function. Contains    */
/*                      all the code that will actually   */
/*                      run                               */
/* Input params:                n/a                       */
/* Output params:               n/a                       */
/* ****************************************************** */
int main(void)
{

	switch_status_type_e ssButton1, ssButton2, ssButton3, ssButton4;
	int count;

	setupPeripherals();


	for (int i=0;;i++)
	{
		if(UART0_BRD_S1_RDRF(UART0)){

		}
		/* Read switches states */
		ledswi_initLedSwitch(0, 4);
		ssButton1 = ledswi_getSwitchStatus(1);
		ssButton2 = ledswi_getSwitchStatus(2);
		ssButton3 = ledswi_getSwitchStatus(3);
		ssButton4 = ledswi_getSwitchStatus(4);

		/* Turn on the LED if the corresponding switch is on */
		ledswi_initLedSwitch(4, 0);
		if(SWITCH_ON == ssButton1)
		{
			ledswi_setLed(1);
		}
		else
		{
			ledswi_clearLed(1);
		}

		if(SWITCH_ON == ssButton2)
		{
			ledswi_setLed(2);
		}
		else
		{
			ledswi_clearLed(2);
		}

		if(SWITCH_ON == ssButton3)
		{
			ledswi_setLed(3);
		}
		else
		{
			ledswi_clearLed(3);
		}

		if(SWITCH_ON == ssButton4)
		{
			ledswi_setLed(4);
		}
		else
		{
			ledswi_clearLed(4);
		}

		/* Shows a counter in the display 7 segments */

		/*
		 * Rate of 1/100 of loop count to displayed count,
		 * otherwise the counter is to fast
		 */
		count = i/100;

		/*
		 * Puts the counter in the displays.
		 * We need to put a delay between each display in order to avoid
		 * having the same data showing in multiple displays
		 */
		display7seg_setDisplay(count%16,0,4);
		count = count/16;
		util_genDelay1ms();

		display7seg_setDisplay(count%16,0,3);
		count = count/16;
		util_genDelay1ms();

		display7seg_setDisplay(count%16,0,2);
		count = count/16;
		util_genDelay1ms();

		display7seg_setDisplay(count%16,0,1);
		util_genDelay1ms();

	} /* Never leave main */
	return 0;
}
